Range Transferable Vote (RTV), a PR extension of Range Voting.

Copyright (C) 2011,  Louis G. "Ted" Stern

This code is was inspired by the Droop-quota-based Approval Transferable Vote
method described by Jameson Quinn in the following posting:

http://www.mail-archive.com/election-methods@lists.electorama.com/msg07066.html

I have generalized and extended Approval Transferable Vote so it can be used
with full ratings ballots and reduces to Range Voting in the single-winner
case.

[footnote: Warren Smith proposed another PR method based on Range Voting that
reweights votes proportionally, RRV:

http://rangevoting.org/RRV.html

Quinn discusses the difference between quota-based and proportionally-based
reweighting methods here:

https://groups.google.com/group/electionscience/browse_thread/thread/6888fba595610d47/6f123e0a2b59fe1d

... end footnote]

Differences between RTV and Quinn's Approval Transferable Vote:

 * Quinn uses an over-quota transfer factor that is similar to that used
   in Single Transferable Vote.

   In RTV, I extend this to take account of the portion of the seat-winner's
   score that was contributed by ballots with no other standing candidates
   available for transfer.  This reduces vote loss and is a disincentive
   against truncation.

 * Quinn's Approval Transferable Vote makes its over-quota transfer based
   on a whole approval vote.

   RTV increases the amount of transfer in proportion to the reduced ballot
   score for the winner.

   In other words, as a ballot's score for the seat winner goes toward zero,
   the amount of strength lost by voting for that candidate also goes to zero.

   This reduces the vote-loss penalty for giving partial approval to compromise
   candidates, and is another disincentive against truncation.

 * This implementation of RTV has options to use five different quotas:

   - Droop = floor( Nvotes / (Nseats + 1.0)) + 1.0

   - Hare  = Nvotes / Nseats

   - Droop-nseats = Droop quota, based on Nvotes * Nseats votes, then divided
                    by Nseats.  It is slightly smaller than traditional Droop
                    in some cases, but still preserves the Droop majority
                    constraint and is identical for single-winner.

                    It is could be considered the Droop quota if you are
                    counting in Cumulative Vote style, with Nseats votes per
                    voter.

   - Droop-max-score =

                    Droop quota, based on Nvotes * max_score votes, then
                    divided by max_score.

                    It is the Droop quota for total scores in Range Voting
                    style, adding up scores per candidate from every ballot,
                    then transformed to ballot-count style.

                    In the single winner case, it would effectively require
                    the same number of votes to exceed the quota as traditional
                    Droop.

   - Hagenbach-Bischoff, the quota used by Quinn = Nvotes / (Nseats + 1.0)

                    The H-B quota may lead to issues such as

                    (1) a non-majority (less than 50% + one vote) controlling
                        half of the seats, or

                    (2) enough unused votes left over to elect another seat.

                    Neither of these can occur with Droop or any of its
                    variants.

   The default is traditional Droop, to follow standard STV practice.

Range scale:

I prefer a range of scores from 0 to 10, and would recommend that for
multi-winner elections, the range scores be limited to those above 50%
approval = Neutral.  However, RTV works with any range scale without
constraint.

In Majority Judgment, the scores 10, 9, 8, 7, 6 can be interpreted as
the named grades "Excellent", "Very Good", "Good", "Acceptable", "Poor",
"Reject", or letter grades A+, A, B, C, D, F; or percentage of alignment
with the voter, 100%, 90%, 80%, 70%, 60%, 0.

I believe that the named grades encourage voters to give their sincere
preferences.

In a multi-winner election, we are striving to find the candidates who best
align with factions of voters, and with sufficient seats, small factions
should be represented, so there is less of a reason to give votes near the
Strongly Reject level (10% to 20%).  Therefore, I would encourage voters to
use only the top half of the available range for multi-winner elections.

Since some ratings ballots may use a shortened range, the script has the
option to add an offset to non-zero scores.  For more information, see "Usage"
below.

----------------

Differences from STV:

  In STV,

  * There must be exactly one candidate at each rank.

  * There can be no gaps in ranks, though lower ranks do not have to be
    filled in.

  * The only way for lower ranked candidates to be counted is for
    candidates in higher ranks to be eliminated or seated, at which
    time lower ranks are moved up one rank.

  * When no candidate's score exceeds the quota, the only way to
    increase the vote strength of other candidates is to eliminate the
    candidate with lowest top-rank score and move other candidates on
    that ballot up one rank.

  * STV passes the "Later-no-harm" criterion.  That is, votes at lower ranks
    have no effect unless all higher-ranked alternatives have been seated or
    eliminated

  * STV is vulnerable to the "no-show" paradox, in which some voters might
    experience a more favorable result if they stay home.

  In RTV,

  * Equal rating is allowed.

  * It is not necessary to fill in a candidate for each rating level.

  * Unlike STV, lower ratings are always taken into account.  So unlike STV,
    it is possible that a voter's lower-rated preferences could prevent their
    higher-rated preferences from winning a seat.  So RTV does not pass the
    "Later-no-harm" criterion.

    However, unlike STV, candidates are never eliminated, so a lower rating
    for an alternative never causes that alternative to be eliminated
    completely, so there is less incentive to artificially raise a second-choice
    alternative to prevent it from being eliminated.

  * RTV passes Woodall's "mono-add-top" criterion in the single-winner limit,
    so it suffers less than STV from the "no-show paradox".  It is suspected
    that there is no way for any multi-winner method to avoid participation
    failures [I would welcome a proof or a counter-example!], but RTV's
    vulnerability would arise from the order of seating, and without
    elimination as in STV, there are fewer ways for participation failures to
    occur.

Background:

Quinn proposed Approval Transferable Vote (ATV) as a stepping stone to a
Bucklin-like multi-winner method.

Unfortunately, Bucklin methods are not monotonic, even in the single-winner
case, nor do they pass the Indepence from Irrelevant Alternatives criterion.

Therefore, I've now taken a different route from ATV to RTV, a method that
reduces to Range Voting for single-winner (and *is* monotonic and satisfies
IIA in that case) and retains many of Range Voting's desirable properties for
multi-winner elections.

Glossary, following the analogy of musical chairs:

Seated:      A candidate has met the quota and won a seat.

Standing:    Candidate has not met quota and is still in the running.

Locked:      A candidate's vote becomes locked on a single ballot when the
             ballot has only one standing candidate left.

             If that single candidate is seated, there are no other
             candidates to transfer the overquota vote to.

             If a candidate's score is locked on a ballot on the first
             round, the ballot is called a bullet vote -- the voter
             picked a single candidate.

             But it can also happen when all other choices on the
             ballot have already been seated.  Then if candidate 'A'
             receives an overvote and the ballot is removed entirely,
             the ballot's excess score for A is not transferable.

Locksums:    The sum of locked scores for a candidate determine how much
             of the candidate's total score can be rescaled and
             redistributed in the event of being seated with an
             overquota.

Rescaled
weight:      As ballots "get their way" by seating a candidate with a
             total approval score over the quota, we multiply the weight
             of that ballot by a factor to transfer the over-quota portion
             of the vote to other candidates on that ballot.

beta[score]: The normalized approval fraction corresponding to a given
             rating score.

	     beta[0] = 0.0, beta[max_score] = 1.0, beta[i] = i / max.

Algorithm:

There are N valid ballots and M seats to fill.

Begin with the rescale factor at 1.0 for each ballot.  Set the quota according
to the desired option.

Repeat until M candidates have been seated or threshold cannot be
lowered any further:

  Compute weighted approval score:
    For each ballot:
       For each standing candidate on that ballot:,
          total[cand] += beta[score[cand]] * rescale[ballot]

          if only one standing candidate on the ballot,
             locked[cand] += beta[score[cand] * rescale[ballot]

  Seat candidate with highest weighted total score

  Rescale unlocked ballots containing that candidate to transfer
  over-quota vote, by multiplying the ballot strength by F, where

     Q = quota,

     T = Total weighted approval score sum for winner

     L = locked weighted approval score sum for winner

     QML = max(Q - L, 0.0)

     TML = max(max(T,Q) - L, eps)

     Fraction of winner's total score sum used up, U, from all unlocked
     ballots voting for winner:

     U = QML / TML

     Over-quota vote transfer rescale factor, F, applied to each previously
     unlocked ballot giving winner a rating of 'score':

     F[score] = 1.0 - beta[score] * U

The 'used-up' formula for U above handles situations where the total
approval score sum has dropped below the quota.  In that case, F[max] =
0, and F[score < max] is greater than zero and less than 1.0.

Usage:

There are some example csv ballots available in my Cumulative Tranferable Vote
project.  I'm duplicating them here.

Here's how to run them:

June 2011 example from http://rangevoting.org/June2011RealWorldRRVvotes.txt

  ./rtv.py -n 9 -q droop -i june2011.csv -o june2011_output.csv

Stephen Unger's STV example, from http://rangevoting.org/STVPRunger.html

  ./rtv.py -n 3 -q droop -i unger.csv -o     unger_output.csv
  ./rtv.py -n 3 -q droop -i unger_new.csv -o unger_new_output.csv

[Note:  I've adjusted ratings so that all non-zero scores are above neutral]

In this example, you can see that by removing two votes that score E highest,
the winner of the last seat changes from E to B.  There is no "no-show" paradox
in this behavior, unlike the STV example illustrated on the web page.

A sample ballot from the CTV project:

  ./rtv.py -n 5 -q droop -i new_sample.csv -o new_sample_output.csv

The csv output file contains a table with the total weighted approval scores
Each score is listed as

   #.#### (position)

where the number in parentheses is the rank of the approval score.

Excluding candidates:

You can test an election with one or more candidates excluded using the Unix
tool 'cut'.  Here's the first example, excluding candidate '108':

  cut -f1-7,9- -d, june2011.csv | \
  ./rtv.py -n 9 -q droop -i - -o june2011_excluding_108_output.csv

Increasing scores:

For multi-winner, it doesn't make sense to rank your choices unless you
approve of them at some level.

However, the scores indicating rank may truncate any preferences below neutral
to zero.

Say you have a set of ballots with scores between 0 and 5; 1 indicating slight
approval, and 5 indicating strong approval.  You may wish to adjust the
non-zero scores into the range 5 through 9 (in a zero to 9 range) or 6 through
10 (in a zero through 10 range).  To do this, use the --offset-scores or -f
option:

   -f 4        # for range = 0:9
   -f 5        # for range = 0:10

Then all of your non-zero input scores would be adjusted upward by the
respective number.

Running the code:

If you don't have a python interpreter, you can run the code via the web,
using

   http://ideone.com

Select Python from the left sidebar.

Cut and paste everything in the rtv.py file, from from the "BEGIN cut and
paste line" to "END cut and paste line" and insert it into the web page's
source code textarea.

In the very same textarea, following the source you've just cut and pasted
above, enter the appropriate input to run your example.  To run the
june2011.csv input, for example, you enter the following two statements:


election = Election(nseats=9,
                    csv_input='-',
                    csv_output='-',
                    qtype='droop')

election.run_election()


Click where it says "click here to enter input (stdin) ...", and paste in your
comma-separated variable input.  For this example, use text from the
june2011.csv file.

Then click on the Submit button on the lower left.
